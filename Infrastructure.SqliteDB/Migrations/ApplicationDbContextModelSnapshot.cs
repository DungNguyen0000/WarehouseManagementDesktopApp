// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.SqliteDB.Context;

#nullable disable

namespace Persistence.SqliteDB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.FormulaListGoodIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Actual")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlannedMass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlannedQuantity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProcessingGoodExportOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProcessingGoodExportOrderId");

                    b.ToTable("formulaListGoodIssues");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.IssueBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Actual")
                        .HasColumnType("TEXT");

                    b.Property<string>("BasketId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IssueBasketListId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductionDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IssueBasketListId");

                    b.ToTable("issueBaskets");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.IssueBasketList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProcessingGoodExportOrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcessingGoodExportOrderId");

                    b.ToTable("issueBasketLists");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.ProcessingGoodExportOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("orderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("processingGoodExportOrders");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Model.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.FormulaListGoodIssue", b =>
                {
                    b.HasOne("Persistence.SqliteDB.Domain.Model.GoodExport.ProcessingGoodExportOrder", null)
                        .WithMany("formulaListGoodIssues")
                        .HasForeignKey("ProcessingGoodExportOrderId");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.IssueBasket", b =>
                {
                    b.HasOne("Persistence.SqliteDB.Domain.Model.GoodExport.IssueBasketList", null)
                        .WithMany("Baskets")
                        .HasForeignKey("IssueBasketListId");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.IssueBasketList", b =>
                {
                    b.HasOne("Persistence.SqliteDB.Domain.Model.GoodExport.ProcessingGoodExportOrder", null)
                        .WithMany("issueBasketLists")
                        .HasForeignKey("ProcessingGoodExportOrderId");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.IssueBasketList", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("Persistence.SqliteDB.Domain.Model.GoodExport.ProcessingGoodExportOrder", b =>
                {
                    b.Navigation("formulaListGoodIssues");

                    b.Navigation("issueBasketLists");
                });
#pragma warning restore 612, 618
        }
    }
}
